<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Garden Sensor Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/animate.css@4.1.1/animate.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1"></script>
  <script src="https://cdn.jsdelivr.net/npm/luxon@3.4.4"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.3.1"></script>

  <style>
    :root {
      --bg-dark: #121212;
      --card-dark: #1d1d1d;
      --txt-main: #e5e5e5;
      --temp: #ff4d94;
      --hum: #30d5e5;
      --lux: #ffd158;
      --moist: #3aa2ff;
      --grid-line: #242424;
    }

    body {
      margin: 0;
      font-family: "Inter", sans-serif;
      background: var(--bg-dark);
      color: var(--txt-main);
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    header {
      margin: 1.5rem 0;
      font-size: clamp(1.6rem, 4vw, 2.2rem);
      font-weight: 700;
      background: linear-gradient(90deg, #2ecc71, #27ae60);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .summary-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      gap: 0.75rem;
      width: min(1000px, 90%);
      margin-bottom: 1rem;
    }

    .card {
      position: relative;
      background: var(--card-dark);
      border-radius: 10px;
      padding: 0.75rem 1rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.45);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      z-index: 1;
      overflow: hidden;
    }
    .card::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: -1;
      width: 110%;
      height: 110%;
      background: radial-gradient(circle, var( --accent, #888) 0%, transparent 60%);
      filter: blur(40px);
      opacity: 0.5;
      border-radius: 40px;
    }

    .card:hover {
      transform: translateY(-10px);
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    }

    .card h4 {
      margin: 0 0 0.25rem;
      font-size: 0.9rem;
      font-weight: 500;
    }

    .value {
      font-size: 1.25rem;
      font-weight: 600;
      white-space: pre-wrap;
    }

    .chart-wrap {
      background: var(--card-dark);
      width: min(1000px, 90%);
      padding: 1.5rem;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.45);
      margin-bottom: 2rem;
    }

    .spark {
      height: 30px;
      width: 100%;
    }

    canvas#sensorChart { height: 420px !important; }

    .footer { font-size: 0.75rem; margin-bottom: 1rem; color: #8a8a8a; }
  </style>
</head>
<body>
  <header class="animate__animated animate__fadeInDown">Garden Sensor Dashboard</header>
  <div class="summary-grid animate__animated animate__fadeInUp" id="cards"></div>
  <div class="chart-wrap animate__animated animate__fadeInUp"><canvas id="sensorChart"></canvas></div>
  <div class="footer">&copy; {{ year }} TechTrev | ESP32 + Flask + MQTT</div>

  <script>
    const makeCard = (id, label, color) => {
      const el = document.createElement("div");
      el.className = "card";
      el.innerHTML = `<h4>${label}</h4><div class="value" id="${id}-val">--</div><canvas class="spark" id="${id}-spark"></canvas>`;
      el.style.setProperty("--accent", color);
      return el;
    };

    const grid = document.getElementById("cards");
    const styles = getComputedStyle(document.documentElement);
    grid.append(
      makeCard("latest", "Last Reading", "#888888"),
      makeCard("avgTemp", "Avg Temp", styles.getPropertyValue("--temp").trim()),
      makeCard("avgHum", "Avg Hum", styles.getPropertyValue("--hum").trim()),
      makeCard("avgLux", "Avg Lux", styles.getPropertyValue("--lux").trim()),
      makeCard("avgMoist", "Avg Moist", styles.getPropertyValue("--moist").trim())
    );

    fetch("/api/history")
      .then((r) => r.json())
      .then((res) => {
        if (res.status !== "ok") return;
        const d = res.data;
        const map = (k) => d.map((e) => ({ x: e.timestamp, y: e[k] }));
        const t = map("temp_f"), h = map("humidity"), l = map("lux"), m = map("moisture");
        const avg = (arr) => (arr.length ? (arr.reduce((s, p) => s + p.y, 0) / arr.length).toFixed(1) : "--");

        const latest = d.at(-1);
        document.getElementById("latest-val").textContent = `Temp: ${latest.temp_f}°F\nRH: ${latest.humidity}%\nLux: ${latest.lux}`;
        document.getElementById("avgTemp-val").textContent = `${avg(t)}°F`;
        document.getElementById("avgHum-val").textContent = `${avg(h)}%`;
        document.getElementById("avgLux-val").textContent = avg(l);
        document.getElementById("avgMoist-val").textContent = `${avg(m)}%`;

        const sparkCfg = (data, col) => ({
          type: "line",
          data: { datasets: [{ data, borderColor: col, tension: 0.3, fill: false, pointRadius: 0 }] },
          options: { responsive: false, plugins: { legend: { display: false } }, scales: { x: { display: false }, y: { display: false } } }
        });

        new Chart(document.getElementById("avgTemp-spark"), sparkCfg(t.slice(-20), styles.getPropertyValue("--temp")));
        new Chart(document.getElementById("avgHum-spark"), sparkCfg(h.slice(-20), styles.getPropertyValue("--hum")));
        new Chart(document.getElementById("avgLux-spark"), sparkCfg(l.slice(-20), styles.getPropertyValue("--lux")));
        new Chart(document.getElementById("avgMoist-spark"), sparkCfg(m.slice(-20), styles.getPropertyValue("--moist")));

        const paddingMs = 1000 * 60 * 3;
        const xMin = new Date(d[0].timestamp).getTime() - paddingMs;
        const xMax = new Date(d[d.length - 1].timestamp).getTime() + paddingMs;

        const ctx = document.getElementById("sensorChart").getContext("2d");
        const chart = new Chart(ctx, {
          type: "line",
          data: {
            datasets: [
              { label: "Temp (°F)", data: t, borderColor: styles.getPropertyValue("--temp").trim(), pointRadius: 0, tension: 0.25, yAxisID: "y1" },
              { label: "Humidity (%)", data: h, borderColor: styles.getPropertyValue("--hum").trim(), pointRadius: 0, tension: 0.25, yAxisID: "y1" },
              { label: "Lux", data: l, borderColor: styles.getPropertyValue("--lux").trim(), pointRadius: 0, tension: 0.25, yAxisID: "y2" },
              { label: "Moisture (%)", data: m, borderColor: styles.getPropertyValue("--moist").trim(), pointRadius: 0, tension: 0.25, yAxisID: "y1" }
            ]
          },
          options: {
            interaction: { mode: "nearest", intersect: false },
            scales: {
              x: {
                type: "time",
                min: localStorage.getItem("zoomStart") || xMin,
                max: localStorage.getItem("zoomEnd") || xMax,
                time: { tooltipFormat: "MMM d h:mm a" },
                ticks: { source: "data" },
                grid: { color: styles.getPropertyValue("--grid-line") }
              },
              y1: { beginAtZero: true, grid: { color: styles.getPropertyValue("--grid-line") } },
              y2: { beginAtZero: true, position: "right", grid: { drawOnChartArea: false } }
            },
            plugins: {
              legend: { labels: { color: styles.getPropertyValue("--txt-main") } },
              zoom: {
                pan: { enabled: true, mode: "x", modifierKey: "ctrl", onPanComplete: ({ chart }) => {
                  const xAxis = chart.scales.x;
                  localStorage.setItem("zoomStart", xAxis.min);
                  localStorage.setItem("zoomEnd", xAxis.max);
                } },
                zoom: {
                  wheel: { enabled: true, modifierKey: "ctrl", speed: 0.1 },
                  pinch: { enabled: true },
                  mode: "x",
                  limits: { x: { minRange: 1000 * 60 * 10 } },
                  onZoomComplete: ({ chart }) => {
                    const xAxis = chart.scales.x;
                    localStorage.setItem("zoomStart", xAxis.min);
                    localStorage.setItem("zoomEnd", xAxis.max);
                  }
                }
              }
            }
          }
        });

    });
  </script>
</body>
</html>
